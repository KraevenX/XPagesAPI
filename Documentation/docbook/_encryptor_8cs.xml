<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_encryptor_8cs">
    <title>Encryptor.cs File Reference</title>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_encryptor">Encryptor</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <simplesect>
            <title> Namespaces </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="namespace_system_1_1_i_o">System::IO</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="namespace_system_1_1_i_o_1_1_compression">System::IO::Compression</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="namespace_system_1_1_security_1_1_cryptography">System::Security::Cryptography</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="namespace_system_1_1_text">System::Text</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file C:/Users/Acketk/source/repos/VSTS/XPagesAPI/XPagesAPI/Engine/Encryptor.cs</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="keyword">using</emphasis>&#32;<link linkend="namespace_system">System</link>;
2 <emphasis class="keyword">using</emphasis>&#32;<link linkend="namespace_system">System</link>.IO;
3 <emphasis class="keyword">using</emphasis>&#32;<link linkend="namespace_system">System</link>.IO.Compression;
4 <emphasis class="keyword">using</emphasis>&#32;<link linkend="namespace_system">System</link>.Security.Cryptography;
5 <emphasis class="keyword">using</emphasis>&#32;<link linkend="namespace_system">System</link>.Text;
6 
7 <emphasis class="keyword">internal</emphasis>&#32;<emphasis class="keyword">class&#32;</emphasis>Encryptor&#32;{
8 
9 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Variables</emphasis>
10 
11 &#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;readonly&#32;<emphasis class="keywordtype">string</emphasis>&#32;IV&#32;=&#32;<emphasis class="stringliteral">&quot;GeNar@tEdIv_K3y!&quot;</emphasis>;&#32;<emphasis class="comment">//&#32;&quot;IV_VALUE_16_BYTE&quot;</emphasis>
12 &#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;readonly&#32;<emphasis class="keywordtype">string</emphasis>&#32;PASSWORD&#32;=&#32;<emphasis class="stringliteral">&quot;JPITeam@XPages!|&quot;</emphasis>;&#32;<emphasis class="comment">//&#32;&quot;PASSWORD_VALUE&quot;</emphasis>
13 &#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;readonly&#32;<emphasis class="keywordtype">string</emphasis>&#32;SALT&#32;=&#32;<emphasis class="stringliteral">&quot;S@1tS@lt_Valu3@JPI_XP@ges&quot;</emphasis>;&#32;<emphasis class="comment">//&quot;SALT_VALUE&quot;</emphasis>
14 
15 &#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">internal</emphasis>&#32;<emphasis class="keywordtype">string</emphasis>&#32;EncodedContent;
16 &#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">internal</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;isInitialized&#32;=&#32;<emphasis class="keyword">false</emphasis>;
17 &#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">internal</emphasis>&#32;<emphasis class="keywordtype">string</emphasis>&#32;DecodedContent;
18 &#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">internal</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;Encode&#32;=&#32;<emphasis class="keyword">false</emphasis>;
19 
20 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;#endregion&#32;Variables</emphasis>
21 
22 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Constructor</emphasis>
23 
24 &#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">internal</emphasis>&#32;Encryptor(<emphasis class="keywordtype">string</emphasis>&#32;content,&#32;<emphasis class="keywordtype">bool</emphasis>&#32;encode,&#32;ref&#32;<link linkend="class_connector">Connector</link>&#32;<link linkend="class_connector">Connector</link>)&#32;{
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Encode&#32;=&#32;encode;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(this.Encode)&#32;{
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//we&#32;need&#32;to&#32;encode&#32;so&#32;set&#32;the&#32;decodedcontent</emphasis>
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.DecodedContent&#32;=&#32;content;
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//we&#32;need&#32;to&#32;decode/decrypt&#32;so&#32;set&#32;the&#32;encodecontent</emphasis>
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.EncodedContent&#32;=&#32;content;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<emphasis class="keywordtype">string</emphasis>.IsNullOrEmpty(<link linkend="class_connector">Connector</link>.EncryptionIV))&#32;{
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IV&#32;=&#32;<link linkend="class_connector">Connector</link>.EncryptionIV;
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
36 
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<emphasis class="keywordtype">string</emphasis>.IsNullOrEmpty(<link linkend="class_connector">Connector</link>.EncryptionPASSWORD))&#32;{
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PASSWORD&#32;=&#32;<link linkend="class_connector">Connector</link>.EncryptionPASSWORD;
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
40 
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<emphasis class="keywordtype">string</emphasis>.IsNullOrEmpty(<link linkend="class_connector">Connector</link>.EncryptionSALT))&#32;{
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SALT&#32;=&#32;<link linkend="class_connector">Connector</link>.EncryptionSALT;
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
44 &#32;&#32;&#32;&#32;}
45 
46 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;#endregion&#32;Constructor</emphasis>
47 
48 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Public&#32;Methods</emphasis>
49 
50 &#32;&#32;&#32;&#32;<emphasis class="keyword">protected</emphasis>&#32;<emphasis class="keyword">internal</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;Initialize()&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">string</emphasis>&#32;Str;
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(this.Encode)&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Str&#32;=&#32;EncryptAndEncode(this.DecodedContent);
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Str&#32;!=&#32;null)&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.EncodedContent&#32;=&#32;Str;
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.isInitialized&#32;=&#32;<emphasis class="keyword">true</emphasis>;
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.isInitialized&#32;=&#32;<emphasis class="keyword">false</emphasis>;
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Str&#32;=&#32;DecodeAndDecrypt(this.EncodedContent);
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Str&#32;!=&#32;null)&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.DecodedContent&#32;=&#32;Str;
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.isInitialized&#32;=&#32;<emphasis class="keyword">true</emphasis>;
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.isInitialized&#32;=&#32;<emphasis class="keyword">false</emphasis>;
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
73 &#32;&#32;&#32;&#32;}
74 
75 &#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;<emphasis class="keywordtype">string</emphasis>&#32;EncryptAndEncode(<emphasis class="keywordtype">string</emphasis>&#32;raw)&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AesCryptoServiceProvider&#32;csp&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;AesCryptoServiceProvider();
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">using</emphasis>&#32;(csp)&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ICryptoTransform&#32;e&#32;=&#32;GetCryptoTransform(csp,&#32;<emphasis class="keyword">true</emphasis>);
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byte[]&#32;inputBuffer&#32;=&#32;Encoding.UTF8.GetBytes(raw);
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byte[]&#32;output&#32;=&#32;e.TransformFinalBlock(inputBuffer,&#32;0,&#32;inputBuffer.Length);
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output&#32;=&#32;DeflaterCompress(output);
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">string</emphasis>&#32;encrypted&#32;=&#32;Convert.ToBase64String(output);
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;encrypted;
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
85 &#32;&#32;&#32;&#32;}
86 
87 &#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;byte[]&#32;DeflaterCompress(byte[]&#32;toCompress)&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//compression</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">using</emphasis>&#32;(MemoryStream&#32;compressedStream&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;MemoryStream())&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compressedStream.Position&#32;=&#32;0;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">using</emphasis>&#32;(DeflateStream&#32;deflater&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;DeflateStream(compressedStream,&#32;CompressionMode.Compress))&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deflater.Write(toCompress,&#32;0,&#32;toCompress.Length);
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;compressedStream.ToArray();
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
97 &#32;&#32;&#32;&#32;}
98 
99 &#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;byte[]&#32;DeflaterDecompress(byte[]&#32;toDecompress)&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//decompression</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">using</emphasis>&#32;(MemoryStream&#32;decompressedStream&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;MemoryStream())&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">using</emphasis>&#32;(MemoryStream&#32;compressedStream&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;MemoryStream(toDecompress))&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">using</emphasis>&#32;(DeflateStream&#32;deflater&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;DeflateStream(compressedStream,&#32;CompressionMode.Decompress))&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;((c&#32;=&#32;deflater.ReadByte())&#32;!=&#32;-1)&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decompressedStream.WriteByte((byte)c);
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;decompressedStream.ToArray();
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
112 &#32;&#32;&#32;&#32;}
113 
114 &#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>&#32;<emphasis class="keywordtype">string</emphasis>&#32;DecodeAndDecrypt(<emphasis class="keywordtype">string</emphasis>&#32;encrypted)&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//this&#32;will&#32;be&#32;in&#32;base64&#32;-&#32;base64&#32;is&#32;zipped</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AesCryptoServiceProvider&#32;csp&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;AesCryptoServiceProvider();
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">using</emphasis>&#32;(csp)&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ICryptoTransform&#32;d&#32;=&#32;GetCryptoTransform(csp,&#32;<emphasis class="keyword">false</emphasis>);
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byte[]&#32;output&#32;=&#32;Convert.FromBase64String(encrypted);
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output&#32;=&#32;DeflaterDecompress(output);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byte[]&#32;decryptedOutput&#32;=&#32;d.TransformFinalBlock(output,&#32;0,&#32;output.Length);
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">string</emphasis>&#32;decypted&#32;=&#32;Encoding.UTF8.GetString(decryptedOutput);
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;decypted;
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
125 &#32;&#32;&#32;&#32;}
126 
127 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;#endregion&#32;Public&#32;Methods</emphasis>
128 
129 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Private&#32;Methods</emphasis>
130 
131 &#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>&#32;ICryptoTransform&#32;GetCryptoTransform(AesCryptoServiceProvider&#32;csp,&#32;<emphasis class="keywordtype">bool</emphasis>&#32;encrypting)&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csp.Mode&#32;=&#32;CipherMode.CBC;
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csp.Padding&#32;=&#32;PaddingMode.PKCS7;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rfc2898DeriveBytes&#32;spec&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;Rfc2898DeriveBytes(Encoding.UTF8.GetBytes(PASSWORD),&#32;Encoding.UTF8.GetBytes(SALT),&#32;65536);
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;byte[]&#32;key&#32;=&#32;spec.GetBytes(16);
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csp.IV&#32;=&#32;Encoding.UTF8.GetBytes(IV);
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csp.Key&#32;=&#32;key;
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(encrypting)&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;csp.CreateEncryptor();
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;csp.CreateDecryptor();
142 &#32;&#32;&#32;&#32;}
143 
144 <emphasis class="preprocessor">&#32;&#32;&#32;&#32;#endregion&#32;Private&#32;Methods</emphasis>
145 <emphasis class="preprocessor">}</emphasis>
    </computeroutput></literallayout>
</section>
